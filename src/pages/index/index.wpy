<style lang="scss">
.fixed-top{
  position: top;
  top: 0;
  left: 0;
  right: 0;
  background-color: rgba($color: #ffffff, $alpha: 1);
  display: flex;
  flex-direction: row;
}
.fixed-bottom{
  @extend .fixed-bottom;
  bottom: 20rpx;
}
.fixed-right{
  position: fixed;
  top: 50%;
  transform: translateY(-50%);
  right: 20rpx;
}
.locationInfo{
  flex: 3;
}
.fixininfo{
  flex: 2;
  display: flex;
  .battery-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: stretch;
    .battery{
      flex: 1;
      .battery-image {
          width: 58rpx;
          height: 24rpx;
          overflow: visible;
        }
    }
    .creatTime {
      line-height: 2.2;
      text-align: center;
      flex: 1;
    }
  }
  .fixing-container {
    flex:1;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    .icon-image {
      flex:1;
      display: flex;
      align-items: center;
      justify-content:center;
    }
    .icon-text {
      text-align: center;
    }
  }
}
.mode{
  width: 30rpx;
  height: 30rpx;
  vertical-align: middle;
}
</style>

<template>
  <view style="height:100%;">
    <map 
      id="myMap"
      style="width:100%; height:100%;"
      show-location
      scale="{{scale}}"
      latitude="{{locationInfo.latitude}}" 
      longitude="{{locationInfo.longitude}}" 
      controls="{{controls}}"
      markers="{{markers}}" >
      <cover-view class="controls fixed-top pl20 pt20 pb20 pr20" wx-if="{{locationInfo.MachineCode}}">
        <cover-view class="locationInfo column-stretch">
          <cover-view class="big bold inline" @tap="address">{{address}}</cover-view>
          <cover-view class="row mt20" @tap="deetailedAddress">
            <cover-image class="mode mr10" src="{{mode}}" />
            <cover-view class="xs weak mr10">{{radius}}</cover-view>
            <cover-view class="xs weak inline">{{deetailedAddress}}</cover-view>
          </cover-view>
        </cover-view>
        <cover-view class="fixininfo">
          <cover-view class="battery-container column-around small">
            <cover-view class="battery weak row-center" wx:if="{{battery}}">
              <cover-view class="mr10">
                <cover-image class="battery-image"  src="{{battery.iconPath}}"/>
              </cover-view>
              <cover-view class="xs">{{battery.battery}}</cover-view>
            </cover-view>
            <cover-view class="creatTime primary mt20" wx:if="{{creatTime}}">
              {{creatTime}}
            </cover-view>
          </cover-view>
          <cover-view class="fixing-container column-around xs">
            <cover-view class="icon-image">
              <cover-image class="icon-lg" src="{{fixing.iconPath}}"/>
            </cover-view>
            <cover-view class="icon-text xs mt10">
              {{fixing.fixingName}}
            </cover-view>
          </cover-view>
        </cover-view>
      </cover-view>
      <cover-view class="controls row-around fixed-bottom">
        <cover-image 
          class="icon-small"  
          src="./assets/moveToLocation.png"
          @tap="moveToLocation"
        />
        <cover-image 
          class="icon-big" 
          src="./assets/getLastPosition.png"
          @tap="getLastPositionSmall"
        />
        <cover-image 
          class="icon-small" 
          src="./assets/my_fill_light.png"
          @tap="toGetMeInfo"
        />
      </cover-view>
      <cover-view class="controls column-center fixed-right">
        <cover-image 
          class="icon-small"  
          src="./assets/add.png"
          @tap="add"
        />
        <cover-image 
          class="icon-small" 
          src="./assets/reduce.png"
          @tap="reduce"
        />
      </cover-view>
    </map>
  </view>
</template>

<script>
  import Wepy from 'wepy'
  import Base from 'mixins/base'
  import Fixing from 'mixins/fixing'
  import Tips from 'utils/tips'
  export default class Index extends Wepy.page {
    mixins = [Base, Fixing]
    config = {
      navigationBarTitleText: '阿布跑跑'
    }
    data = {
      isFirst: true,
      scale: 16, // 默认 16
      markers: null,
      locationInfo: {
        latitude: '39.910119', // 当前地图经纬度点，默认定位到北京
        longitude: '116.397983'
      },
      userInfo: null
    }
    computed = {
      // 当前默认设备
      isDefaultFixingInfo() {
        if (this.fixingsInfo && this.fixingsInfo.length > 0) {
          for (let i = 0; i < this.fixingsInfo.length; i++) {
            if (Number.parseInt(this.fixingsInfo[i].isDefault) === 1) {
              return this.fixingsInfo[i]
            }
          }
        }
        return null
      },
      fixing() {
        if (this.isDefaultFixingInfo) {
          return {
            iconPath: this.isDefaultFixingInfo.fixingIcon,
            fixingName: this.isDefaultFixingInfo.fixingName
          }
        }
        return null
      },
      radius() {
        if (this.locationInfo && this.locationInfo.Radius) {
          return `精度${this.locationInfo.Radius}米`
        }
        return null
      },
      deetailedAddress() {
        if (this.locationInfo && this.locationInfo.address_component) {
          return `${this.locationInfo.address_component.district}${this.locationInfo.address_component.street_number}`
        }
        return null
      },
      address() {
        if (this.locationInfo && this.locationInfo.address_reference) {
          if (this.locationInfo.address_reference.landmark_l1) return this.locationInfo.address_reference.landmark_l1.title
          if (this.locationInfo.address_reference.landmark_l2) return this.locationInfo.address_reference.landmark_l2.title
        }
        return null
      },
      mode() {
        if (this.locationInfo && this.locationInfo.Mode) {
          let Mode = this.locationInfo.Mode
          if (Mode === 'LBS') return './assets/lbs-small.png'
          if (Mode === 'GPS') return './assets/gps-small.png'
          if (Mode === 'WIFI') return './assets/wifi-small.png'
        }
        return null
      },
      battery() {
        if (this.locationInfo && this.locationInfo.Battery) {
          let Battery = Number.parseInt(this.locationInfo.Battery)
          if (Battery > 0 && Battery <= 10) return {battery: `${Battery}%`, iconPath: './assets/battery/10.png'}
          if (Battery > 10 && Battery <= 20) return {battery: `${Battery}%`, iconPath: './assets/battery/20.png'}
          if (Battery > 20 && Battery <= 35) return {battery: `${Battery}%`, iconPath: './assets/battery/35.png'}
          if (Battery > 35 && Battery <= 50) return {battery: `${Battery}%`, iconPath: './assets/battery/50.png'}
          if (Battery > 50 && Battery <= 70) return {battery: `${Battery}%`, iconPath: './assets/battery/70.png'}
          if (Battery > 70 && Battery <= 90) return {battery: `${Battery}%`, iconPath: './assets/battery/90.png'}
          if (Battery > 90 && Battery <= 100) return {battery: `${Battery}%`, iconPath: './assets/battery/100.png'}
        }
        return null
      },
      creatTime() {
        if (this.locationInfo && this.locationInfo.CreatTime) {
          let date = Number.parseInt(this.locationInfo.CreatTime + '000')
          let creatTime = this.ToTodayOrYesterday(date)
          return creatTime
        }
        return null
      }
    }
    methods = {
      address() {
        this.Toast(this.address)
      },
      deetailedAddress() {
        this.Toast(this.deetailedAddress)
      },
      // 将地图中心移动到当前定位点，需要配合map组件的show-location使用
      moveToLocation() {
        this.mapCtx.moveToLocation()
      },
      async getLastPositionSmall() {
        Tips.locationing()
        let markers = await this.GetLastPositionSmall(this.isDefaultFixingInfo)
        Tips.locationed()
        console.log(markers)
        if (markers) {
          this.locationInfo = {...markers}
          this.markers = [{...markers}]
          this.$apply()
          this.mapCtx.translateMarker({
            markerId: 0,
            autoRotate: true,
            duration: 1000,
            rotate: 90,
            destination: {
              latitude: markers.latitude,
              longitude: markers.longitude
            }
          })
        } else {
          this.Toast('定位失败，请重新尝试')
        }
      },
      toGetMeInfo() {
        Wepy.navigateTo({
          url: '../user/GetMeInfo'
        })
      },
      add() {
        this.mapCtx.getCenterLocation({
          success: (res) => {
            this.locationInfo.latitude = res.latitude
            this.locationInfo.longitude = res.longitude
            this.$apply()
            if (this.scale === 18) return null
            this.scale = this.scale + 1
          }
        })
      },
      reduce() {
        this.mapCtx.getCenterLocation({
          success: (res) => {
            this.locationInfo.latitude = res.latitude
            this.locationInfo.longitude = res.longitude
            this.$apply()
            if (this.scale === 5) return null
            this.scale = this.scale - 1
          }
        })
      }
    }
    async onLoad() {
      // 授权获取用户数据
      this.userInfo = this.$parent.GetUserInfo()
    }
    onReady() {
      // 定义myMap上下文
      this.mapCtx = Wepy.createMapContext('myMap')
    }
    async onShow() {
      // 用户是否登录 & 进入界面获取 API -> GetLastPosition
      if (this.userInfo) {
        Tips.locationing()
        let fixingsInfo = await this.GetBindinginfo()
        this.fixingsInfo = fixingsInfo.data
        this.$apply()
        // 获取默认设备最后定位经纬度
        let markers = await this.GetLastPosition(this.isDefaultFixingInfo)
        this.locationInfo = {...markers}
        this.markers = [{...markers}]
        this.$apply()
        Tips.locationed()
        this.mapCtx.translateMarker({
          markerId: 0,
          autoRotate: true,
          duration: 1000,
          rotate: 90,
          destination: {
            latitude: markers.latitude,
            longitude: markers.longitude
          },
          animationEnd() {
          }
        })
      }
    }
  }
</script>
